/*
 * generated by Xtext 2.16.0
 */
package at.ac.univie.swa.scoping

import at.ac.univie.swa.CmlModelUtil
import at.ac.univie.swa.cml.Actor
import at.ac.univie.swa.cml.AtomicAction
import at.ac.univie.swa.cml.Class
import at.ac.univie.swa.cml.Clause
import at.ac.univie.swa.cml.CmlPackage
import at.ac.univie.swa.cml.EnumerationLiteral
import at.ac.univie.swa.cml.MemberSelection
import at.ac.univie.swa.cml.Parameter
import at.ac.univie.swa.typing.CmlTypeConformance
import at.ac.univie.swa.typing.CmlTypeProvider
import java.util.Enumeration
import javax.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import at.ac.univie.swa.cml.Block
import at.ac.univie.swa.cml.VariableDeclaration
import at.ac.univie.swa.cml.Operation

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class CmlScopeProvider extends AbstractCmlScopeProvider {

	@Inject extension CmlTypeProvider
	@Inject extension CmlModelUtil
	@Inject extension CmlTypeConformance

	override getScope(EObject context, EReference reference) {
		if (reference == CmlPackage.Literals.SYMBOL_REFERENCE__REF) {
			return scopeForSymbolRef(context)
		} else if (context instanceof MemberSelection) {
			return scopeForMemberSelection(context)
		} else if (reference == CmlPackage.Literals.ENUMERATION_LITERAL__LITERAL) {
			return scopeForEnumLiteral(context)
		} else if (reference == CmlPackage.Literals.ACTOR__PARTY) {
			if (context instanceof Actor) {
				var candidates = context.containingClass.attributes.filter(a | a.typeOf.classHierarchyWithObject.exists[conformsToParty])
				return Scopes.scopeFor(candidates)
			}
		} /*else if (reference == CmlPackage.Literals.ATOMIC_ACTION__ACTION) {
			if (context instanceof AtomicAction) {
				var clause = EcoreUtil2.getContainerOfType(context, Clause)
				if (clause?.actor?.party?.type !== null) {
					var allActions = clause.actor.party.typeOf.operations
					return Scopes.scopeFor(allActions)
				// return Scopes.scopeFor(allActions.filter[context.args.size == args.size])
				}
			}
		} else if (reference == CmlPackage.Literals.ATOMIC_ACTION__ARGS) {
			if (context instanceof AtomicAction) {
				if (context.action !== null) {
					var args = EcoreUtil2.getAllContentsOfType(context.action, Parameter)
					return Scopes.scopeFor(args);
				}
			}
		}*/

		return super.getScope(context, reference)
	}

	def protected IScope scopeForSymbolRef(EObject context) {
		var container = context.eContainer
		// println(container.class.name)
		return switch (container) {
			Operation:
				Scopes.scopeFor(container.params, scopeForSymbolRef(container))
			AtomicAction:
				Scopes.scopeFor(container.params, scopeForSymbolRef(container))
			Block:
				Scopes.scopeFor(
					container.statements.takeWhile[it != context].filter(VariableDeclaration),
					scopeForSymbolRef(container))
			Class: {
				var parentScope = IScope::NULLSCOPE
				for (c : container.classHierarchyWithObject.toArray().reverseView) {
					parentScope = Scopes::scopeFor((c as Class).attributes, parentScope)
				}
				return Scopes::scopeFor(container.attributes, parentScope)
			}
			default:
				scopeForSymbolRef(container)
		}
	}

	def protected IScope scopeForMemberSelection(MemberSelection sel) {
		var type = sel.receiver.typeFor

		if (type === null || type.isPrimitive)
			return IScope.NULLSCOPE

		if (type instanceof Class) {
			var parentScope = IScope::NULLSCOPE
			for (c : type.classHierarchyWithObject.toArray().reverseView) {
				parentScope = Scopes::scopeFor((c as Class).selectedFeatures(sel), parentScope)
			}
			return Scopes::scopeFor(type.selectedFeatures(sel), parentScope)

		}
	}

	def protected IScope scopeForEnumLiteral(EObject context) {
		if (context instanceof EnumerationLiteral) {
			var parentScope = IScope::NULLSCOPE
			
			if (context.enumeration === null || context.enumeration.isPrimitive)
				return parentScope
			
			if (context.enumeration.classHierarchyWithObject.exists[conformsToEnum]) {
				return Scopes::scopeFor(context.enumeration.enumElements, parentScope)
			} else
				return parentScope
		}
	}

	def selectedFeatures(Class type, MemberSelection sel) {
		if (sel.methodinvocation)
			type.operations + type.attributes
		else
			type.attributes + type.operations
	}

}
