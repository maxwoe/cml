/*
 * generated by Xtext 2.16.0
 */
package at.ac.univie.swa.scoping

import at.ac.univie.swa.CmlLib
import at.ac.univie.swa.CmlModelUtil
import at.ac.univie.swa.cml.Block
import at.ac.univie.swa.cml.Class
import at.ac.univie.swa.cml.CmlPackage
import at.ac.univie.swa.cml.CmlProgram
import at.ac.univie.swa.cml.MemberSelection
import at.ac.univie.swa.cml.Operation
import at.ac.univie.swa.cml.SymbolReference
import at.ac.univie.swa.cml.VariableDeclaration
import at.ac.univie.swa.typing.CmlTypeConformance
import at.ac.univie.swa.typing.CmlTypeProvider
import javax.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import com.google.common.base.Predicate
import org.eclipse.xtext.scoping.impl.FilteringScope
import at.ac.univie.swa.cml.Enumeration

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class CmlScopeProvider extends AbstractCmlScopeProvider {

	@Inject extension CmlTypeProvider
	@Inject extension CmlModelUtil
	@Inject extension CmlTypeConformance
	@Inject extension CmlLib
	@Inject extension IQualifiedNameProvider

	override getScope(EObject context, EReference reference) {
		println(context + " | " + reference)
		if (reference == CmlPackage.Literals.SYMBOL_REFERENCE__SYMBOL) {
			return scopeForSymbolRef(context, reference)

//			if (context instanceof SymbolReference && (context as SymbolReference).enumeration) {
//				if ((context as SymbolReference).symbol instanceof Class) {
//					scope = Scopes::scopeFor(((context as SymbolReference).symbol as Class).enumElements, scope)
//
//				}
//			}
//			return scope

		} else if (reference == CmlPackage.Literals.ENUMERATION__LITERAL) {
			return scopeForEnumLiteral(context)
		}
		
		else if (context instanceof MemberSelection) {
			return scopeForMemberSelection(context)
		} 
//		else if (reference == CmlPackage.Literals.SYMBOL_REFERENCE__ENUMERATION) {
//			return scopeForEnumLiteral(context)
//		} 
//		else if (reference == CmlPackage.Literals.ACTOR__PARTY) {
//			if (context instanceof Actor) {
//				var parentScope = IScope::NULLSCOPE
//				for (c : context.containingClass.classHierarchyWithObject.toArray().reverseView) {
//					parentScope = Scopes::scopeFor((c as Class).attributes/*.filter[!inferType.isPrimitive && (inferType.subclassOfParty || inferType.conformsToParty)]*/, parentScope)
//				}
//				return Scopes::scopeFor(context.containingClass.attributes/*.filter[!inferType.isPrimitive && (inferType.subclassOfParty || inferType.conformsToParty)]*/, parentScope)
//			}
//		}
		return super.getScope(context, reference)
	}

	def protected IScope scopeForSymbolRef(EObject context, EReference reference) {
		var container = context.eContainer
		
		return switch (container) {
			Operation:
				Scopes.scopeFor(container.params, scopeForSymbolRef(container, reference))
			Block:
				Scopes.scopeFor(
					container.statements.takeWhile[it != context].filter(VariableDeclaration),
					scopeForSymbolRef(container, reference))
			Class: {
				var parentScope = IScope::NULLSCOPE
				for (c : container.classHierarchyWithObject.toArray().reverseView) {
					parentScope = Scopes::scopeFor((c as Class).attributes, parentScope)
				}
				return Scopes::scopeFor(container.attributes, scopeForSymbolRef(container, reference))
			}
//			ForLoop:
//				Scopes.scopeFor(#[container.declaration], scopeForSymbolRef(container) )
			CmlProgram: 
				allClasses(container, reference)
			default:
				scopeForSymbolRef(container, reference)
		}
	}

	def protected IScope scopeForMemberSelection(MemberSelection mfc) {
		var type = mfc.receiver.typeFor

		if (type === null || type.isPrimitive)
			return IScope.NULLSCOPE
			
		if (type instanceof Class) {
			var parentScope = IScope::NULLSCOPE
			for (c : type.classHierarchyWithObject.toArray().reverseView) {
				parentScope = Scopes::scopeFor((c as Class).selectedFeatures(mfc), parentScope)
			}
			return Scopes::scopeFor(type.selectedFeatures(mfc), parentScope)
		}
	}

	def protected IScope scopeForEnumLiteral(EObject context) {
		if (context instanceof Enumeration) {
			var parentScope = IScope::NULLSCOPE
			
			if (context.enumeration === null)
				return parentScope
			
			if (context.enumeration instanceof Class) {
				return Scopes::scopeFor((context.enumeration as Class).enumElements, parentScope)
			} else
				return parentScope
		}
	}

	def selectedFeatures(Class type, MemberSelection mfc) {
		if (mfc.methodinvocation)
			type.operations + type.attributes
		else
			type.attributes + type.operations
	}
	
	def allClasses(EObject context, EReference reference) {
		val IScope delegateScope = delegateGetScope(context, reference)
		val Predicate<IEObjectDescription> filter = new Predicate<IEObjectDescription>() {
			override boolean apply(IEObjectDescription od) {
				val obj = od.EObjectOrProxy
				if (obj instanceof Class)
					true
				else
					false
			}

		}
		new FilteringScope(delegateScope, filter)
	}
}
