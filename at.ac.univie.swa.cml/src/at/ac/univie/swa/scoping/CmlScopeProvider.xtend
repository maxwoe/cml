/*
 * generated by Xtext 2.16.0
 */
package at.ac.univie.swa.scoping

import at.ac.univie.swa.cml.Action
import at.ac.univie.swa.cml.Attribute
import at.ac.univie.swa.cml.Clause
import at.ac.univie.swa.cml.CmlPackage
import at.ac.univie.swa.cml.DeonticAction
import at.ac.univie.swa.cml.DotExpression
import at.ac.univie.swa.cml.DotExpressionStart
import at.ac.univie.swa.cml.Entity
import at.ac.univie.swa.cml.EntityType
import at.ac.univie.swa.cml.Party
import at.ac.univie.swa.cml.PrimitiveType
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class CmlScopeProvider extends AbstractCmlScopeProvider {

	// private static final Logger logger = Logger.getLogger(CmlScopeProvider.getName());
	// @Inject extension CmlExtensions
	override getScope(EObject context, EReference reference) {

		/*if (reference == CmlPackage.Literals.DEONTIC_ACTION__ACTION) {
			if(context instanceof DeonticAction) {
				val clause = EcoreUtil2.getContainerOfType(context, Clause)
				if (clause !== null && clause.actor !== null && clause.actor.party !== null) {
					val candidates = EcoreUtil2.getAllContentsOfType(clause.actor.party, Action)
					return Scopes.scopeFor(candidates);
				}
			}
		}

		if (reference == CmlPackage.Literals.DEONTIC_ACTION__ARGS) {
			if (context instanceof DeonticAction) {
				val da = EcoreUtil2.getContainerOfType(context, DeonticAction)
				if (da !== null && da.action !== null) {
					val args = EcoreUtil2.getAllContentsOfType(da.action, Attribute)
					return Scopes.scopeFor(args);
				}
			}
		}
		
		if (reference == CmlPackage.Literals.DOT_EXPRESSION__TAIL) {
			if (context instanceof DotExpression) {
				val head = context.head;
				switch (head) {
					DotExpressionStart:
						switch (head.ref) {
							Entity:
								return Scopes::scopeFor((head.ref as Entity).attributes)
							Party:
								return Scopes::scopeFor((head.ref as Party).attributes)
							default:
								return IScope::NULLSCOPE
						}
					DotExpression: {
						val tail = head.tail
						switch (tail) {
							Attribute: {
								val type = (head.tail as Attribute).type
								switch (type) {
									PrimitiveType: {
										return Scopes::scopeFor(type.eContents)
									}
									EntityType: {
										return Scopes.scopeFor(type.ref.attributes)
									}
									default: {
										return IScope.NULLSCOPE
									}
								}
							}
							default:
								return IScope::NULLSCOPE
						}
					}
					default:
						return IScope::NULLSCOPE
				}
			}
		}*/

		super.getScope(context, reference)
	}
}
