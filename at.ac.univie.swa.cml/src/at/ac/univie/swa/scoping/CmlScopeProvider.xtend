/*
 * generated by Xtext 2.16.0
 */
package at.ac.univie.swa.scoping

import at.ac.univie.swa.cml.Action
import at.ac.univie.swa.cml.Clause
import at.ac.univie.swa.cml.CmlPackage
import at.ac.univie.swa.cml.Contract
import at.ac.univie.swa.cml.DeonticAction
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class CmlScopeProvider extends AbstractCmlScopeProvider {

 	/*
	override getScope(EObject context, EReference reference) {
		if (reference.EType === ColaPackage.Literals.ACTION) {
			val Party party = if(reference === ColaPackage.Literals.SIMPLE_ACTION__ACTION) EcoreUtil2.getContainerOfType(context, Clause).actor.party else null;
			if (party === null || party.eIsProxy)
				super.getScope(context, reference)
			else {
				val List<Action> list = getContract(context).parties.fold(new ArrayList, [r, t|r.addAll(t.actions); r]);
				val List<IEObjectDescription> desc = list.filter[a|a.eContainer === party].fold(new ArrayList, [ r, t |
					r.add(EObjectDescription.create(t.name, t));
					r
				]);
				new SimpleScope(SimpleScope.NULLSCOPE, desc);
			}	
		}
		return super.getScope(context, reference)
	}*/
		
	override getScope(EObject context, EReference reference) {
		if (context instanceof DeonticAction && reference == CmlPackage.Literals.DEONTIC_ACTION__ACTION) {
			System.out.println("context: " + context)
			System.out.println("reference: " + reference)

			val container = EcoreUtil2.getContainerOfType(context, Clause)
			if (container !== null && container instanceof Clause && container.actor !== null &&
				container.actor.party !== null) {
					
				val candidates = EcoreUtil2.getAllContentsOfType(container.actor.party, Action)
				return Scopes.scopeFor(candidates);
			}

		}
		return super.getScope(context, reference);
	}
	
	/*
	override getScope(EObject context, EReference reference) {
        if (context instanceof Element
                && reference == MyDslPackage.Literals.ELEMENT__SUPER_ELEMENT) {
            val rootElement = EcoreUtil2.getRootContainer(context)
            val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Element)
            val existingScope = Scopes.scopeFor(candidates)
            // Scope that filters out the context element from the candidates list
            return new FilteringScope(existingScope, [getEObjectOrProxy != context])
        }
        return super.getScope(context, reference);
    }*/
    
	
	def Clause getClause(EObject o) {
		if (o === null)
			null
		else if(o instanceof Clause) o as Clause else getClause(o.eContainer);
	}

	def Contract getContract(EObject o) {
		if (o === null)
			null
		else if(o instanceof Contract) o else getContract(o.eContainer);
	}
}
