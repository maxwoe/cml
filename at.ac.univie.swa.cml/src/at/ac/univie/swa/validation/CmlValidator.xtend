/*
 * generated by Xtext 2.16.0
 */
package at.ac.univie.swa.validation

import at.ac.univie.swa.CmlModelUtil
import at.ac.univie.swa.cml.Attribute
import at.ac.univie.swa.cml.Block
import at.ac.univie.swa.cml.Class
import at.ac.univie.swa.cml.CmlPackage
import at.ac.univie.swa.cml.CmlProgram
import at.ac.univie.swa.cml.Expression
import at.ac.univie.swa.cml.FeatureSelection
import at.ac.univie.swa.cml.NamedElement
import at.ac.univie.swa.cml.Operation
import at.ac.univie.swa.cml.ReturnStatement
import at.ac.univie.swa.cml.SuperExpression
import at.ac.univie.swa.cml.VariableDeclaration
import at.ac.univie.swa.scoping.CmlIndex
import at.ac.univie.swa.typing.CmlTypeConformance
import at.ac.univie.swa.typing.CmlTypeProvider
import com.google.common.collect.HashMultimap
import com.google.inject.Inject
import java.util.ArrayList
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.validation.CheckType

import static extension org.eclipse.xtext.EcoreUtil2.*
import at.ac.univie.swa.cml.SymbolReference
import at.ac.univie.swa.cml.Closure
import at.ac.univie.swa.cml.OtherOperatorExpression
import at.ac.univie.swa.cml.NewExpression
import at.ac.univie.swa.cml.AssignmentExpression

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class CmlValidator extends AbstractCmlValidator {
	
	@Inject extension IQualifiedNameProvider
	@Inject extension CmlModelUtil
	@Inject extension CmlTypeProvider
	@Inject extension CmlTypeConformance
	@Inject extension CmlIndex
	
	protected static val ISSUE_CODE_PREFIX = "cml.lang."
	public static val HIERARCHY_CYCLE = ISSUE_CODE_PREFIX + "HierarchyCycle"
	public static val FIELD_SELECTION_ON_METHOD = ISSUE_CODE_PREFIX + "FieldSelectionOnMethod"
	public static val METHOD_INVOCATION_ON_FIELD = ISSUE_CODE_PREFIX + "MethodInvocationOnField"
	public static val UNREACHABLE_CODE = ISSUE_CODE_PREFIX + "UnreachableCode"
	public static val MISSING_FINAL_RETURN = ISSUE_CODE_PREFIX + "MissingFinalReturn"
	public static val DUPLICATE_ELEMENT = ISSUE_CODE_PREFIX + "DuplicateElement"
	public static val INCOMPATIBLE_TYPES = ISSUE_CODE_PREFIX + "IncompatibleTypes"
	public static val INVALID_ARGS = ISSUE_CODE_PREFIX + "InvalidArgs"
	public static val WRONG_METHOD_OVERRIDE = ISSUE_CODE_PREFIX + "WrongMethodOverride"
	public static val MEMBER_NOT_ACCESSIBLE = ISSUE_CODE_PREFIX + "MemberNotAccessible"
	public static val DUPLICATE_CLASS = ISSUE_CODE_PREFIX + "DuplicateClass"
	public static val WRONG_SUPER_USAGE = ISSUE_CODE_PREFIX + "WrongSuperUsage"
	public static val REDUCED_ACCESSIBILITY = ISSUE_CODE_PREFIX + "ReducedAccessibility"
	public static val OPPOSITE_INCONSISTENCY = ISSUE_CODE_PREFIX + "OppositeInconsistency"
	public static val MISSING_IDENTITY_DEFINITION = ISSUE_CODE_PREFIX + "MissingIdentityDefinition"
	public static val WRONG_SYMBOL_USAGE = ISSUE_CODE_PREFIX + "WrongSymbolUsage"
	
	@Check
    def void checkNameStartsWithCapital(Class c) {
        if (!Character.isUpperCase(c.name.charAt(0))) {
            warning("Name should start with a capital", 
                CmlPackage.Literals.NAMED_ELEMENT__NAME)
        }
    }

	@Check 
	def void checkClassHierarchy(Class c) {
		if (c.classHierarchy.contains(c)) {
			error("Cycle in hierarchy of Class '" + c.name + "'",
				CmlPackage::eINSTANCE.class_Superclass,
				HIERARCHY_CYCLE,
				c.superclass.name)
		}
	}
	
	@Check 
	def void checkSuperclass(Class c) {
		if (c.kind != c.superclass.kind) {
			error("'" + c.name + "' must extend '" + c.kind + "'" ,
				CmlPackage::eINSTANCE.class_Superclass,
				INCOMPATIBLE_TYPES,
				c.superclass.name)
		}
	}
	
//	@Check 
//	def void checkIdentityDefinition(Class c) {
//		if ((c.kind.equals("party") || c.kind.equals("asset")) && c.id === null && !c.isAbstract && !c.classHierarchy.exists[id !== null]) {
//			error("'" + c.name + "' is not abstract. It must define an identifying attribute.",
//				null,
//				MISSING_IDENTITY_DEFINITION,
//				c.name)
//		}
//	}

	@Check 
	def void checkNoDuplicateClasses(CmlProgram cmlp) {
		checkNoDuplicateElements(cmlp.classes, "class")
	}

	@Check 
	def void checkNoDuplicateFeatures(Class c) {
		val attributes = new ArrayList(c.classHierarchyAttributes.values);
		attributes.addAll(c.attributes)
		checkNoDuplicateElements(attributes, "attribute")
		checkNoDuplicateElements(c.operations, "operation")
		checkNoDuplicateElements(c.clauses, "clause")
		checkNoDuplicateElements(c.enumElements, "enumeration literal")
	}
	
	@Check 
	def void checkNoDuplicateSymbols(Operation o) {
		checkNoDuplicateElements(o.params, "parameter")
		checkNoDuplicateElements(o.body.getAllContentsOfType(VariableDeclaration), "variable")
	}
	
	// perform this check only on file save
	@Check(CheckType.NORMAL)
	def checkDuplicateClassesInFiles(CmlProgram p) {
		val externalClasses = p.getVisibleExternalClassesDescriptions
		for (c : p.classes) {
			val className = c.fullyQualifiedName
			if (externalClasses.containsKey(className)) {
				error("The type " + c.name + " is already defined", c, CmlPackage.eINSTANCE.namedElement_Name,
					DUPLICATE_CLASS)
			}
		}
	}
	
	@Check
	def void checkFeatureSelection(FeatureSelection fc) {
		val feature = fc.feature

		if (feature instanceof Attribute && fc.opCall)
			error(
				'''Method invocation on a field''', CmlPackage.eINSTANCE.featureSelection_OpCall,
				METHOD_INVOCATION_ON_FIELD)
		else if (feature instanceof Operation && !fc.opCall)
			error(
				'''Field selection on a method''',
				CmlPackage.eINSTANCE.featureSelection_Feature,
				FIELD_SELECTION_ON_METHOD
			)
	}
	
	@Check
	def void checkUnreachableCode(Block block) {
		val statements = block.statements
		for (var i = 0; i < statements.length - 1; i++) {
			if (statements.get(i) instanceof ReturnStatement) {
				error("Unreachable code", statements.get(i + 1), null, UNREACHABLE_CODE)
				return
			}
		}
	}

	@Check
	def void checkMethodEndsWithReturn(Operation o) {
		if (o.returnStatement === null && !o.inferType.conformsToVoid) {
			error("Method must end with a return statement", CmlPackage.eINSTANCE.operation_Body, MISSING_FINAL_RETURN)
		}
	}
	
	@Check
	def void checkCorrectReturnUse(ReturnStatement stmnt){
		val returntype = stmnt.containingOperation.inferType
		switch(returntype){
			case returntype.conformsToVoid :
				if(stmnt.expression !== null)
					error("Return statement should be empty within void return type operation '" + stmnt.containingOperation.name + "'",
						CmlPackage::eINSTANCE.returnStatement_Expression,
						INCOMPATIBLE_TYPES) 
			default:
				if(stmnt.expression === null && returntype !== null)
					error("Return statement should not be empty within operation '" + stmnt.containingOperation.name + "'",
						null,
						INCOMPATIBLE_TYPES)	
		}
	}

	@Check
	def void checkSuperUsage(SuperExpression s) {
		if (s.eContainingFeature != CmlPackage.eINSTANCE.featureSelection_Receiver)
			error("'super' can be used only as feature selection receiver", null, WRONG_SUPER_USAGE)
	}
	
	@Check
	def void checkReferenceUsage(SymbolReference sr) {
		if (sr.symbol instanceof Class && sr.eContainingFeature != CmlPackage.eINSTANCE.featureSelection_Receiver)
			error("'" + sr.symbol.name + "' can be used only as feature selection receiver", null, WRONG_SYMBOL_USAGE)
	}
	
	@Check
	def void checkConformance(Expression exp) {
		val actualType = exp.typeFor
		val expectedType = exp.expectedType
		if (expectedType === null || actualType === null)
			return; // nothing to check
		if (!actualType.isConformant(expectedType)) {
			error("Incompatible types. Expected '" + (expectedType as Class).name + "' but was '" + (actualType as Class).name + "'",
				null, INCOMPATIBLE_TYPES);
		}
	}
	
	@Check
	def void checkClosureConstuctorArguments(Closure c) {
		var container = c.eContainer
		switch (container) {
			OtherOperatorExpression case container.op == "=>": {
				var left = container.left
				if (left instanceof NewExpression)
					if (left.type instanceof Class) {
						val expressionInBlock = (c.expression as Block)
						val expressions = expressionInBlock.expressions
						val reference = (left.type as Class)
						val types = expressions.map[typeFor]
						println(types)
						val attributes = expressions.filter(AssignmentExpression).map[it.left].filter(SymbolReference).
							map[it.symbol].filter(Attribute)
						println(attributes)
						if (attributes.size != reference.attributes.size) {
							error("Invalid number of arguments: expected " + reference.attributes.size + " but was " +
								expressions.size, CmlPackage.eINSTANCE.closure_Expression, INVALID_ARGS)
						}
						if (!attributes.sortBy[name].elementsEqual(reference.attributes.sortBy[name])) {
							error("Invalid declaration", CmlPackage.eINSTANCE.closure_Expression, OPPOSITE_INCONSISTENCY)
						}

					}
			}
		}
	}
	
	@Check 
	def void checkMethodInvocationArguments(FeatureSelection fs) {
		val operation = fs.feature
		if (operation instanceof Operation) {
			if (operation.params.size != fs.args.size) {
				error("Invalid number of arguments: expected " + operation.params.size + " but was " + fs.args.size,
					CmlPackage.eINSTANCE.featureSelection_Feature, INVALID_ARGS)
			}
		}
	}
	
	@Check 
	def void checkMethodInvocationArguments(SymbolReference sr) {
		val operation = sr.symbol
		if (operation instanceof Operation) {
			if (operation.params.size != sr.args.size) {
				error("Invalid number of arguments: expected " + operation.params.size + " but was " + sr.args.size,
					CmlPackage.eINSTANCE.symbolReference_Symbol, INVALID_ARGS)
			}
		}
	}
	
	@Check 
	def void checkConstructorArguments(NewExpression ne) {
		val type = ne.type
		if (type instanceof Class) {
			if (type.attributes.size != ne.args.size) {
				error("Invalid number of arguments: expected " + type.attributes.size + " but was " + ne.args.size,
					CmlPackage.eINSTANCE.newExpression_Type, INVALID_ARGS)
			}
		}
	}
	
	def private void checkNoDuplicateElements(Iterable<? extends NamedElement> elements, String desc) {
		val multiMap = HashMultimap.create()

		for (e : elements)
			multiMap.put(e.name, e)

		for (entry : multiMap.asMap.entrySet) {
			val duplicates = entry.value
			if (duplicates.size > 1) {
				for (d : duplicates)
					error("Duplicate " + desc + " '" + d.name + "'", d, CmlPackage.eINSTANCE.namedElement_Name,
						DUPLICATE_ELEMENT)
			}
		}
	}
	
}
