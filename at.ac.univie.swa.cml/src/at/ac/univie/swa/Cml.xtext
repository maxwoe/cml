grammar at.ac.univie.swa.Cml with org.eclipse.xtext.common.Terminals

import 'http://www.eclipse.org/emf/2002/Ecore' as ecore

generate cml 'http://swa.univie.ac.at/Cml'

CmlProgram:
	('namespace' name=QualifiedName)?
	imports+=Import*
	(model+=ModelElement |
	contracts+=Contract)*;

Import:
	'import' importedNamespace = QualifiedNameWithWildcard;
			
Feature:
	Attribute | Operation | Clause | EnumerationElement;
	
FeatureAttribute returns Feature:  
	Attribute;
	
FeatureAttributeAndOperation returns Feature:
	Attribute | Operation;

FeatureAttributeAndClause returns Feature:
	AttributeWithInitExpr | Clause;
	
FeatureEnumeration returns Feature:
	EnumerationElement;
	
Operation:
	visibility=Visibility? name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' (':' type=ReturnType)?
	body=Block;

Block:
	{Block} 
	BEGIN 
		statements+=Statement* 
	END;

Statement:
	VariableDeclaration |
	Return |
	Expression |
	IfStatement;

VariableDeclaration:
	type=Container name=ID '=' expression=Expression;

Return:
	{Return} 'return' expression=Expression;

IfStatement:
	'if' '(' expression=Expression ')' thenBlock=IfBlock
	(=>'else' elseBlock=IfBlock)?;

IfBlock returns Block:
	statements+=Statement | 
	Block;

Parameter:
	type=Container name=ID;
	
ReturnType:
	{VoidType} 'void' | Container;

Container:
	Primitive | Collection | Array;

enum Visibility:
	PUBLIC='public' | PRIVATE='private' | PROTECTED='protected';

Type:
	Class | Collection | Array;

Attribute:
	name=ID (':'|isReference?='->') type=Container;

AttributeWithInitExpr returns Attribute:
	name=ID ':' type=Container ('=' initExp=Expression)?;

Primitive:
	type=[Type|QualifiedName];
	
Array:
	type=[Type|QualifiedName] '[' (length=INT)? ']';

Collection:
	collectionType=CollectionType '<' type=[Type|QualifiedName] '>';
	
CollectionType:
	{Set} name='Set' | {Bag} name='Bag' /* | {Sequence} name='Sequence' | {OrderedSet} name='OrderedSet'*/;

ModelElement:
	Class | Party | Asset | Event | Enumeration;

Class:
	(isAbstract?='abstract')? kind='class' /*('<'(typedVars+=ID (',' typedVars+=ID)*)?'>')?*/ name=ID ('extends' superclass=[Class|QualifiedName])?
	(BEGIN
		features+=FeatureAttributeAndOperation*
	END)?;

Contract returns Class:
	kind='contract' name=ID ('extends' superclass=[Class|QualifiedName])?
	BEGIN
		features+=FeatureAttributeAndClause*
	END;
	
Party returns Class:
	kind='party' name=ID ('identifier' id=[Attribute])? ('extends' superclass=[Class|QualifiedName])? 
	BEGIN
		 features+=FeatureAttribute+
	END;
	
Asset returns Class:
	kind='asset' name=ID ('identifier' id=[Attribute])? ('extends' superclass=[Class|QualifiedName])? 
	BEGIN
		features+=FeatureAttribute+
	END;

Event returns Class:
	kind='event' name=ID
	(BEGIN
		features+=FeatureAttribute+
	END)?;

Enumeration returns Class:
	kind='enum' name=ID
	BEGIN
		features+=FeatureEnumeration+
	END;

EnumerationElement:
	name = ID;
		
Clause:
	'clause' name=ID
	BEGIN
		antecedent=Antecedent
		actor=Actor
		action=DeonticAction
	END;

Antecedent:
	{Antecedent} temporal=TemporalConstraint? general=Constraint?;

TemporalConstraint:
	'due' constraint=TimeConstraint;
	
Constraint:
	'given' expression=Expression;

Actor:
	'party' party=[Attribute];

enum Deontic:
	MUST='must' | MAY='may' | MUST_NOT= 'must_not';

DeonticAction:
	deontic=Deontic compoundAction=AtomicAction;

CompoundAction:
	OrCompoundAction;

OrCompoundAction returns CompoundAction:
	SeqCompoundAction ({OrCompoundAction.left=current} op=('or') right=SeqCompoundAction)*;

SeqCompoundAction returns CompoundAction:
	AndCompoundAction ({SeqCompoundAction.left=current} op=('then') right=AndCompoundAction)*;
	
AndCompoundAction returns CompoundAction:
	AtomicCompoundAction ({AndCompoundAction.left=current} op=('and') right=AtomicCompoundAction)*;

AtomicCompoundAction returns CompoundAction:
	'(' CompoundAction ')' | AtomicAction;

AtomicAction:
	name=ID '(' (params+=Parameter (',' params+=Parameter)*)? ')' (':' type=ReturnType)?
	(BEGIN
		'pre' preCondition=Expression
		('post' postCondition=Expression)?
	END)?;

TimeConstraint:
	closed?='within'? timeframe=Expression? period=PeriodicTime? precedence=TemporalPrecedence reference=(TimeQuery|Expression);

PeriodicTime:
	'every' period=Expression 'from' start=(TimeQuery|Expression) ('until' end=(TimeQuery|Expression))?;
	
enum TemporalPrecedence:
	BEFORE='before' |
	//BEFORE_OR_EQUALS='before or at the same time as' |
	//EQUALS ='at the same time as' |
	//AFTER_OR_EQUALS='after or at the same time as' |
	AFTER='after';

ClauseQuery:
	'clause' ref=[Clause] 'fulfilled';

EventQuery:
	'event' ref=[Attribute] 'occurred';
	
ActionQuery:
	multiplicity=('all'|'any'|'this')?  partyRef=[Attribute] query='executed' actionRef=[Operation];
	
TimeQuery:
	ClauseQuery | EventQuery | ActionQuery;
		
Expression: ImpliesExpression;
	
ImpliesExpression returns Expression:
	XorExpression (=>({ImpliesExpression.left=current} op='implies') right=XorExpression)*;

XorExpression returns Expression:
	OrExpression (=>({XorExpression.left=current} op='xor') right=OrExpression)*;

OrExpression returns Expression:
	AndExpression (=>({OrExpression.left=current} op='or') right=AndExpression)*;

AndExpression returns Expression:
	EqualityExpression (=>({AndExpression.left=current} op='and') right=EqualityExpression)*;

EqualityExpression returns Expression :
	RelationalExpression (=>({EqualityExpression.left=current} op=('=='|'!=')) right=RelationalExpression)*;

RelationalExpression returns Expression:
	AdditiveExpression (=>({RelationalExpression.left=current} op=('>' | '<' | '>=' | '<=')) right=AdditiveExpression)*;

//ConditionalOpExp returns Expression:
//	AdditionOpExp ('if' {ConditionalOpExp.left=current} 'then' trueCase=AdditionOpExp 'else' falseCase=AdditionOpExp)? ;

AdditiveExpression returns Expression: 
	MultiplicativeExpression (=>({AdditiveExpression.left=current} op=('+' | '-')) right=MultiplicativeExpression)*;

MultiplicativeExpression returns Expression: 
	UnaryExpression (=>({MultiplicativeExpression.left=current} op=('*' | '/')) right=UnaryExpression)*;

UnaryExpression returns Expression:
	{UnaryExpression} op=('not' | '!' | '-' | '+') operand=UnaryExpression | SelectionExpression;

SelectionExpression returns Expression:
	PrimaryExpression 
	(=> ({MemberSelection.receiver=current} '.') member=[Feature] 
		(=> methodinvocation?='(' (args+=Expression (',' args+=Expression)*)? ')')?)*;

PrimaryExpression returns Expression:	
	LiteralExpression |
	{SelfExpression} 'self' |
	{SuperExpression} 'super' |
	{CallerExpression} 'caller' |
	{SymbolReference} ref=[Symbol] |
	'(' Expression ')';
	
Symbol:
	Attribute | Parameter | VariableDeclaration;

NamedElement:
	Class | Feature | Symbol;
	
LiteralExpression returns Expression:
	{IntegerLiteral} value=INT |
	{BooleanLiteral} ('false' | 'true') |
	{StringLiteral} value=STRING |
	{RealLiteral} value=REAL |
	{DurationLiteral} value=INT unit=TimeUnit |
	{DateTimeLiteral} value=DATE |
	{NullLiteral} 'null' |
	{EnumerationLiteral} enumeration=[Class|QualifiedName] '::' literal=[EnumerationElement];

enum TimeUnit: 
	MINUTE='minutes'|
	HOUR='hours'|
	DAY='days'|
	WEEK='weeks'|
	SECOND='seconds';

QualifiedName:
    ID ('.' ID)*;

QualifiedNameWithWildcard:
    QualifiedName '.*'?;

terminal DATE returns ecore::EDate: '0'..'9''0'..'9''0'..'9''0'..'9' '-' '0'..'9''0'..'9' '-' '0'..'9''0'..'9';
terminal REAL returns ecore::EDouble: ('0'..'9')+'.'('0'..'9'+); 	
terminal BEGIN: 'synthetic:BEGIN';  // increase indentation
terminal END: 'synthetic:END';      // decrease indentation