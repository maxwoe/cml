grammar at.ac.univie.swa.Cml with org.eclipse.xtext.common.Terminals

import 'http://www.eclipse.org/emf/2002/Ecore' as ecore

generate cml 'http://swa.univie.ac.at/Cml'

Model:
	('namespace' name=QualifiedName)?
	imports+=Import*
	types+=Type*
	expr+=Expr*
	contracts+=Contract*;

Import:
	'import' importedNamespace = QualifiedNameWithWildcard;
	
Contract:
	'contract' name=ID
	BEGIN
		(attributes+=Attribute |
		 clauses+=Clause |
		 vars+=VariableDeclaration |
		 derived+=DerivedAttribute |
		 expr+=Expr)*
	END;
	
Expr:
	'exp' exp=Expression;
	
Feature:
	Attribute | Operation;
	
Operation:
	visibility=Visibility? name=ID '(' (args+=Parameter (',' args+=Parameter)*)? ')' (':' type=ReturnType)?;

Parameter:
	type=Container name=ID;
	
ReturnType:
	{VoidType} 'void' | Container;

VariableDeclaration:
	'var' name=ID ':' type=Container;

Container:
	Primitive | Collection | Array;

enum Visibility:
	PUBLIC='public' | PRIVATE='private' | PROTECTED='protected';

Type:
	Class | Enumeration | Collection | Array;

Attribute:
	name=ID ':' type=Container;

Primitive:
	type=[Type|QualifiedName];
	
Array:
	type=[Type|QualifiedName] '[' (length=INT)? ']';

Collection:
	collectionType=CollectionType '<' type=[Type|QualifiedName] '>';
	
CollectionType:
	{Set} name='Set' | {Bag} name='Bag' | {Sequence} name='Sequence' | {OrderedSet} name='OrderedSet';

//Concept:
//	Class | Party | Asset | Event;

Class:
	(isAbstract?='abstract')? 'class' name=ID ('extends' superclass=[Class|QualifiedName])?
	(BEGIN
		features+=Feature*
		vars+=VariableDeclaration* 
		exp+=Expr*
	END)?;
/* 
Party returns Class:
	type='party' name=ID ('identified' 'by' id=[Attribute])? ('extends' superclass=[Class|QualifiedName])? 
	BEGIN
		 features+=Feature*
	END;
	
Asset returns Class:
	type='asset' name=ID ('identified' 'by' id=[Attribute])? ('extends' superclass=[Class|QualifiedName])? 
	BEGIN
		attributes+=Attribute+
	END;

Event returns Class:
	type='event' name=ID 
	(BEGIN
		attributes+=Attribute
	END)?;*/

Enumeration:
	'enum' name=ID
	BEGIN
		elements+=EnumerationElement*
	END;

EnumerationElement:
	name = ID;
		
DerivedAttribute:
	'derive' name=ID ':' type=Container '=' expression=Expression;
	
Clause:
	'clause' name=ID
	BEGIN
		antecedent=Antecedent
		actor=Actor
		action=DeonticAction
	END;

Antecedent:
	{Antecedent} temporal=TemporalConstraint? general=Constraint?;

TemporalConstraint:
	'due' constraint=TimeConstraint;
	
Constraint:
	'given' expression=Expression;

Actor:
	'party' party=[Attribute];

enum Deontic:
	MUST='must' | MAY='may' | MUST_NOT= 'must_not';

DeonticAction:
	deontic=Deontic compoundAction=AtomicAction;

CompoundAction:
	OrCompoundAction;

OrCompoundAction returns CompoundAction:
	SeqCompoundAction ({OrCompoundAction.left=current} op=('or') right=SeqCompoundAction)*;

SeqCompoundAction returns CompoundAction:
	AndCompoundAction ({SeqCompoundAction.left=current} op=('then') right=AndCompoundAction)*;
	
AndCompoundAction returns CompoundAction:
	AtomicCompoundAction ({AndCompoundAction.left=current} op=('and') right=AtomicCompoundAction)*;

AtomicCompoundAction returns CompoundAction:
	'(' CompoundAction ')' | AtomicAction;

AtomicAction:
	action=[Operation] '(' (args+=[Attribute] (',' args+=[Attribute])*)? ')'
	(BEGIN
		'pre' preCondition=Expression
		('post' postCondition=Expression)?
	END)?;

TimeConstraint:
	closed?='within'? timeframe=(RelativeTime)? period=PeriodicTime? precedence=TemporalPrecedence reference=(AbsoluteTime);

PeriodicTime:
	'every' period=(RelativeTime) 'from' start=(AbsoluteTime) ('until' end=(AbsoluteTime))?;
	
enum TemporalPrecedence:
	BEFORE='before' |
	//BEFORE_OR_EQUALS='before or at the same time as' |
	//EQUALS ='at the same time as' |
	//AFTER_OR_EQUALS='after or at the same time as' |
	AFTER='after';

ClauseQuery:
	'clause' ref=[Clause] 'fulfilled';

EventQuery:
	'event' ref=[Attribute] 'occurred';
	
ActionQuery:
	multiplicity=('all'|'any'|'this')?  partyRef=[Attribute] query='executed' actionRef=[Operation];
	
TimeQuery:
	ClauseQuery | EventQuery | ActionQuery;
	
Time:
	AbsoluteTime | RelativeTime;

AbsoluteTime:
	TimeQuery | globalTimeRef=GlobalTimeReference;
	
RelativeTime:
	TimeFrame;

enum GlobalTimeReference:
	NOW='_now' | CONTRACT_START='_contractStart' | CONTRACT_END='_contractEnd';
	
TimeFrame:
	{TimeFrame} (weeks=INT 'weeks') | {TimeFrame} (days=INT 'days') | {TimeFrame} (hours=INT 'hours') | {TimeFrame} (minutes=INT 'minutes') | {TimeFrame} (seconds=INT 'seconds');
	
Expression: ImpliesExpression;
	
ImpliesExpression returns Expression:
	XorExpression (=>({ImpliesExpression.left=current} op='implies') right=XorExpression)*;

XorExpression returns Expression:
	OrExpression (=>({XorExpression.left=current} op='xor') right=OrExpression)*;

OrExpression returns Expression:
	AndExpression (=>({OrExpression.left=current} op='or') right=AndExpression)*;

AndExpression returns Expression:
	EqualityExpression (=>({AndExpression.left=current} op='and') right=EqualityExpression)*;

EqualityExpression returns Expression :
	RelationalExpression (=>({EqualityExpression.left=current} op=('=='|'!=')) right=RelationalExpression)*;

RelationalExpression returns Expression:
	AdditiveExpression (=>({RelationalExpression.left=current} op=('>' | '<' | '>=' | '<=')) right=AdditiveExpression)*;

//ConditionalOpExp returns Expression:
//	AdditionOpExp ('if' {ConditionalOpExp.left=current} 'then' trueCase=AdditionOpExp 'else' falseCase=AdditionOpExp)? ;

AdditiveExpression returns Expression: 
	MultiplicativeExpression (=>({AdditiveExpression.left=current} op=('+' | '-')) right=MultiplicativeExpression)*;

MultiplicativeExpression returns Expression : 
	UnaryExpression (=>({MultiplicativeExpression.left=current} op=('*' | '/')) right=UnaryExpression)*;

UnaryExpression returns Expression:
	{UnaryExpression} op=('not' | '!' | '-' | '+') operand=UnaryExpression | SelectionExpression;

SelectionExpression returns Expression:
	PrimaryExpression 
	(=>({MemberSelection.receiver=current} '.')
		member=[Feature]
		(=>methodinvocation?='('
			(args+=Expression (',' args+=Expression)*)? ')'
		)?
		)*;
	/*(
		{MemberSelection.receiver=current} '.'
		member=[Feature]
		(methodinvocation?='('
			(args+=Expression (',' args+=Expression)*)? ')'
		)?
)*;*/
	/* 
	(=>({MemberSelection.receiver=current} '.') member=[Feature]
	(=>methodinvocation ?= '(' (args += Expression (',' args += Expression)* )?  ')' )?

	|=>({MemberSelection.receiver=current} isCollectionOperation?='->') coll=CollectionOperation
	(=>methodinvocation ?= '(' (args += Expression (',' args += Expression)* )?  ')' )?)*;*/

/* 
CollectionOpCall returns OclLExpression:
	{CollectionOpCallExp} name=CollectionOpID '(' (arguments+=Expression ("," arguments+=Expression)*)? ')';

IterateExp returns OclLExpression:
	{IterateExp}name='iterate' '(' iterators+=Iterator  (','iterators+=Iterator)* ';'result=LocalVariable '|' body=Expression')';
*/
PrimaryExpression returns Expression:	
	LiteralExpression |
	{SelfExpression} 'self' |
	{SuperExpression} 'super' |
	{LocalReference} ref=[Local] |
	'(' Expression ')';
	
Local:
	VariableDeclaration | Parameter;

NamedElement:
	Class | Feature | Local | Enumeration | EnumerationElement;
	
LiteralExpression returns Expression:
	{IntegerLiteral} value=INT |
	{BooleanLiteral} ('false' | 'true') |
	{StringLiteral} value=STRING |
	{RealLiteral} value=REAL |
	{NullLiteral} 'null' |
	{DurationLiteral} value=INT unit=TimeUnit |
	{DateTimeLiteral} value=DATE |
	{EnumerationLiteral} enumeration=[Enumeration|QualifiedName] '::' literal=[EnumerationElement];

enum TimeUnit: 
	MINUTE='minutes'|
	HOUR='hours'|
	DAY='days'|
	WEEK='weeks'|
	SECOND='seconds';

terminal fragment DIGIT : ('0'..'9');
//terminal DATE : '\'' DIGIT DIGIT DIGIT DIGIT '.'? DIGIT DIGIT '.'? DIGIT DIGIT ' '? (DIGIT DIGIT ':'? DIGIT DIGIT ':'? DIGIT DIGIT)? '\'';

CollectionOperation returns ecore::EString:
	//'count' | 'includes' | 'excludes' | 'exists' | 'forAll' | 'sum' | 'select' | 'at'
	'size'	| 'includes' | 'excludes' | 'count' | 'includesAll' | 'excludesAll' | 'isEmpty' | 'notEmpty' | 'sum' |
	'exists' | 'forAll'	| 'isUnique' | 'collect' | 'select'	| 'reject' | 'at';

QualifiedName:
    ID ('.' ID)*;

QualifiedNameWithWildcard:
    QualifiedName '.*'?;

terminal DATE returns ecore::EDate: '0'..'9''0'..'9''0'..'9''0'..'9' '-' '0'..'9''0'..'9' '-' '0'..'9''0'..'9';
terminal REAL returns ecore::EDouble: ('0'..'9')+'.'('0'..'9'+); 	
terminal BEGIN: 'synthetic:BEGIN';  // increase indentation
terminal END: 'synthetic:END';      // decrease indentation