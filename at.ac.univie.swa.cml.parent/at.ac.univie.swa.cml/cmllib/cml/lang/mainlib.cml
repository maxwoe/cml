namespace cml.lang

concept Any
	String toString()
concept Identity
	String id
concept Party extends Identity
	Token token
concept Contract extends Party
	Party anyone
	Party caller
	DateTime now
	DateTime contractStart
	DateTime contractEnd
concept Asset extends Identity
	Number quota
	Boolean transfer(Party p, Number n)
concept Token extends Asset
concept Transaction extends Identity
concept Event extends Any
concept Enum extends Any
concept String extends Any
concept Boolean extends Any
abstract concept Number extends Any
	Real toReal()
	Integer toInteger()
concept Integer extends Number
	Integer average(Integer i)
	Integer max(Integer i)
	Integer min(Integer i)
concept Real extends Number
	Real max(Real i)
	Real min(Real i)
	Real sqrt()
	Real ceil()
	Real floor()
concept DateTime extends Any
	Boolean isBefore(DateTime d)
	Boolean isAfter(DateTime d)
	Integer second()
	Integer minute()
	Integer hour()
	Integer day()
	Integer week()
	Boolean ^equals(DateTime d)
	DateTime addDuration(Duration d)
	DateTime subtractDuration(Duration d)
	Duration durationBetween(DateTime d)
concept Duration extends Any
	Duration toSeconds()
	Duration toMinutes()
	Duration toHours()
	Duration toDays()
	Duration toWeeks()
	Duration addDuration(Duration d)
	Duration subtractDuration(Duration d)
concept Error extends Any
	String message	
ensure(Boolean c, String m)
	if(!c)
		throw Error(m)

//concept Optional<T> extends Any
//	Boolean hasValue()
//	T getValueOrDefault() 
//	T getValueOrDefault(T)
//concept None extends Any
//concept Request extends Transaction
//concept Response extends Transaction
//concept Array extends Any
//	Integer size()
//concept Collection<T> extends Object
//	Boolean add(T t) 
//	Boolean addAll(Collection<T> c)
//	Boolean contains(T t) 
//	Boolean containsAll(Collection<T> c)
//	Boolean isEmpty()
//	Boolean remove(T t)
//	Boolean removeAll(Collection<T> c)
//	Void retainAll(Collection<T> c)
//	Integer size() 
//	Array<T> toArray() 
//concept Set<T> extends Collection
//concept Bag<T> extends Collection
//concept Map<K,V> extends Object
//	Integer size()
//	Boolean isEmpty()
//	Boolean notEmpty()
//	Boolean containsKey(K key)
//	Boolean containsValue(V value)
//	clear()
//	V add(K key, V value)
//	V rmv(K key)
//	V get(K key) 